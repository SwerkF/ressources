generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AvatarType {
  UPLOAD
  BORING
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum AuthProviderType {
  MANUAL
  GOOGLE
  GITHUB
  FACEBOOK
  TWITTER
}

model SocialMedia {
  id       String @id @default(uuid())
  platform String
  url      String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
}

model User {
  id         String         @id @default(uuid())
  email      String         @unique
  name       String?
  password   String?        // Devient optionnel si on utilise un login externe
  role       Role           @default(USER)
  bio        String?     
  avatarType AvatarType? 
  avatarData Json?       
  socialMedias SocialMedia[]
  ratings    Rating[]
  sessions   Session[]
  interests  Interest[]     @relation("UserInterests")
  authProviders AuthProvider[]  // Relation avec AuthProvider
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model AuthProvider {
  id          String           @id @default(uuid())
  providerType AuthProviderType // Enum pour le type de provider (Google, GitHub, etc.)
  providerId  String           // ID utilisateur spécifique au provider (ex: Google ID, GitHub ID)
  accessToken String?          // Token d'accès pour certains providers, si nécessaire
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([providerType, providerId])
}

model Interest {
  id  String    @id @default(uuid())
  name String   @unique
  users User[]  @relation("UserInterests")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model RessourceCategory {
  id          String    @id @default(cuid())
  ressourceId Int
  categoryId  Int
  ressource   Ressource @relation(fields: [ressourceId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  ressources RessourceCategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ressource {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  image       String
  url         String
  categories  RessourceCategory[]
  chapters    Chapter[]
  ratings     Rating[]
  progress    Int?        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Chapter {
  id          Int         @id @default(autoincrement())
  title       String
  ressource   Ressource   @relation(fields: [ressourceId], references: [id], onDelete: Cascade)
  ressourceId Int
  content     Content[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Content {
  id          Int      @id @default(autoincrement())
  type        String
  value       String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rating {
  id          Int      @id @default(autoincrement())
  rating      Int
  comment     String?
  userId      String
  ressourceId Int
  user        User      @relation(fields: [userId], references: [id])
  ressource   Ressource @relation(fields: [ressourceId], references: [id])
  @@unique([userId, ressourceId])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
